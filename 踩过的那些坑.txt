Tetris技术难点：

1、碰撞检测&边界检测

碰撞检测是将棋盘矩阵与积木矩阵相加，元素大于1则发生碰撞。碰撞检测属于提前检测，因此计算的是当前积木进行相应变换后的位置及形状的碰撞检测。另外在左右移动、下移、快速下落、变形前都需要预先进行碰撞检测及边界检测。

2、积木变形

一开始使用的是积木所在父元素在样式上进行旋转，同时将积木矩阵进行旋转实现，但是积木的变形不仅仅有旋转，还有翻转，因此最后使用的是19种积木元素，在变形时进行样式和数据的替换。

3、JavaScript异步编程

网上的其他一些js写的俄罗斯方块，它们的左右移动和向下移动基本上是采用瞬间移动，在样式上直接改变元素定位。这种实现方式虽然简单，但是在视觉效果上会有明显的跳跃，因此我采用的是平滑移动的方式，每一次左右下移都是一次动画。

这种实现方式带来了很多的bug,正常操作不会有什么问题，但是如果在正在下落的短暂时间内触发左右平移或快速下落事件，这些事件就会排队，但是此时队列中事件的数据仍然是下落动画完成前的数据，队列中事件执行时的数据已经不是当前数据了。

在动画之前先改变数据能够解决上述问题，但是还会存在问题，比如下落时间内连续点击左移两次，那么第二次点击的数据不是第一次点击实现后的数据。

还有一种解决方案就是在下落的时间内关闭其他事件监听，下落事件完成后再开启监听，这样虽然能解决问题，但是在用户操作时会存在点击失效或者按键失效的情形，用户体验不佳。

解决中。。。